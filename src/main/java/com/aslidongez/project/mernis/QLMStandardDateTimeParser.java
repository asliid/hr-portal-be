
package com.aslidongez.project.mernis;

//------------------------------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 9.0.1.0
//
// Created by Quasar Development 
//
// This class has been generated for test purposes only and cannot be used in any commercial project.
// To use it in commercial project, you need to generate this class again with Premium account.
// Check https://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account.
//
// Licence: 0748CD85B25D51C6FB45A167F04462481585527E8FFF12036564B5056076309C431C9A20873A9D95B1835FF2CB0A84FB700607F7A17B1F35639B054DB5E67615
//------------------------------------------------------------------------
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalQuery;


public class QLMStandardDateTimeParser implements QLMDateTimeParser
{

    public String getStringFromDate(java.time.LocalDate date)
    {
        if(date==null)
        {
            return null;
        }
        return java.time.format.DateTimeFormatter.ISO_DATE.format(date);
    }

    public String getStringFromTime(java.time.LocalTime date)
    {
        if (date == null)
        {
            return null;
        }
        return java.time.format.DateTimeFormatter.ISO_LOCAL_TIME.format(date);
    }

    public String getStringFromDuration(java.time.Duration date)
    {
        if (date == null)
        {
            return null;
        }
        return date.toString();
    }

    public String getStringFromDateTime(java.time.ZonedDateTime date)
    {
        if (date == null) {
            return null;
        }
        return java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(date);
    }

    public java.time.ZonedDateTime parse(String value)
    {
        if (value == null)
        {
            return null;
        }
        java.time.format.DateTimeFormatterBuilder builder = new java.time.format.DateTimeFormatterBuilder();
        DateTimeFormatter formatter = builder
            .parseCaseInsensitive()
            .append(java.time.format.DateTimeFormatter.ISO_DATE_TIME)
            .optionalStart().appendZoneOrOffsetId().optionalEnd()
            .toFormatter();

        TemporalAccessor parsed = formatter.parseBest(value,new TemporalQuery[]{
                temporalAccessor -> java.time.ZonedDateTime.from(temporalAccessor),
                temporal -> java.time.LocalDateTime.from(temporal)
        });

        if (parsed instanceof java.time.ZonedDateTime) {
            return (java.time.ZonedDateTime)parsed;
        }
        java.time.LocalDateTime local =(java.time.LocalDateTime) parsed;
        return local.atZone( java.time.ZoneOffset.UTC);
    }

    public java.time.LocalDate parseLocal(String value)
    {
        if (value == null)
        {
            return null;
        }
        return java.time.LocalDate.parse(value);
    }

    public java.time.Duration parseDuration(String value)
    {
        if (value == null) {
            return null;
        }
        return java.time.Duration.parse(value);
    }

    public java.time.LocalTime parseTime(String value) {
        if (value == null)
        {
            return null;
        }
        return java.time.LocalTime.parse(value, java.time.format.DateTimeFormatter.ISO_TIME);
    }

}